// This file is auto-generated.

package main

import (
	"tx3trp"
)

const DefaultTRPEndpoint = "{{trpEndpoint}}"

var DefaultHeaders = map[string]string{
{{#each headers}}
	"{{@key}}": "{{this}}",
{{/each}}
}

var DefaultEnvArgs = map[string]string{
{{#each envArgs}}
	"{{@key}}": "{{this}}",
{{/each}}
}

{{#each transactions}}
// {{params_name}} defines the parameters for the {{name}} transaction
type {{params_name}} struct {
{{#each parameters}}
	{{name}} {{type_name}} `json:"{{name}}"`
{{/each}}
}

// {{constant_name}} contains the TIR bytecode for the {{name}} transaction
var {{constant_name}} = tx3trp.TirInfo{
	Bytecode: "{{ir_bytes}}",
	Encoding: "hex",
	Version:  "v1alpha1",
}

{{/each}}
// Client provides methods to interact with the tx3 protocol
type Client struct {
	client *tx3trp.TRPClient
}

// NewClient creates a new Client with the given options
func NewClient(options tx3trp.ClientOptions) *Client {
	return &Client{
		client: tx3trp.NewTRPClient(options),
	}
}

// NewClientWithDefaults creates a new Client with default options
func NewClientWithDefaults() *Client {
	options := tx3trp.ClientOptions{
		Endpoint: DefaultTRPEndpoint,
		Headers:  DefaultHeaders,
		EnvArgs:  make(map[string]interface{}),
	}

	// Convert string env args to interface{}
	for k, v := range DefaultEnvArgs {
		options.EnvArgs[k] = v
	}

	return NewClient(options)
}

{{#each transactions}}
// {{function_name}} resolves the {{name}} transaction with the given parameters
func (c *Client) {{function_name}}(args {{params_name}}) (*tx3trp.TxEnvelope, error) {
	return c.client.Resolve(tx3trp.ProtoTxRequest{
		Tir:  {{constant_name}},
		Args: args,
	})
}
{{/each}}


// Instance of the singleton client
var DefaultClient *Client

// init function runs automatically when the package is imported
func init() {
	DefaultClient = NewClientWithDefaults()
}
