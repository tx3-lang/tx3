import { resolveProtoTx, Tx } from 'tx3';
export type ClaimWithPasswordParams = {
    password: Uint8Array;
    quantity: number;
};
export const CLAIM_WITH_PASSWORD_IR = {
    bytecode: "1000000001000000000000000f0000000c0000000000000070726f76696465645f676173010b00000009000000000000007265717565737465720300000001100000000100000000000000010b00000009000000000000007265717565737465720300000000010e0000000e0000000d0000000c0000000000000070726f76696465645f67617310000000010000000a00000001000000000000001c00000000000000ef7a1cebb2dc7de884ddf82f8fcbc91fe9750dcd8c12ec7643a99bbe0200000007000000000000004d59544f4b454e0b00000008000000000000007175616e74697479000000000000000001010a00000001000000000000001c00000000000000ef7a1cebb2dc7de884ddf82f8fcbc91fe9750dcd8c12ec7643a99bbe0200000007000000000000004d59544f4b454e0b00000008000000000000007175616e7469747900000000010b000000080000000000000070617373776f7264020000000000000000000000",
    encoding: 'hex',
    version: 'v1alpha1'
};
export async function claimWithPassword(args: ClaimWithPasswordParams): Promise<Tx> {
    return await resolveProtoTx({
        ir: CLAIM_WITH_PASSWORD_IR,
        args
    });
}
