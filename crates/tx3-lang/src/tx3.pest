WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Identifiers and basic types
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
number = @{ "-"? ~ ASCII_DIGIT+ }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
bool = @{ "true" | "false" }
hex_string = @{ "0x" ~ ASCII_HEX_DIGIT+ }
wildcard = @{ "*" }

// Type definitions
type = { "Int" | "Bool" | "Bytes" | identifier }

// Parameters
parameter = { identifier ~ ":" ~ type }
parameter_list = { "(" ~ (parameter ~ ("," ~ parameter)*)? ~ ")" }

// Asset definitions
asset_def = {
    "asset" ~ identifier ~ "=" ~ hex_string ~ ("." ~ (identifier | hex_string | wildcard))? ~ ";"
}

// Party definitions
party_def = {
    "party" ~ identifier ~ ";"
}

// Type definitions
record_field = { identifier ~ ":" ~ type }

record_def = {
    "record" ~ identifier ~ "{" ~
    (record_field ~ ",")* ~
    "}"
}

variant_case_struct = {
    identifier ~ "{" ~
    (record_field ~ ",")* ~
    "}"
}

variant_case_tuple = {
    identifier ~ "(" ~
    (type ~ ",")* ~
    ")"
}

variant_case_unit = {
    identifier
}

variant_case = _{
    variant_case_struct |
    variant_case_tuple |
    variant_case_unit
}

variant_def = {
    "variant" ~ identifier ~ "{" ~
    (variant_case ~ ",")* ~
    "}"
}

type_def = {
    record_def |
    variant_def
}

// Expressions
property_access = { identifier ~ "." ~ identifier ~ ("." ~ identifier)* }

asset_expr = { asset_term ~ (binary_operator ~ asset_term)* }
asset_term = _{ asset_constructor | property_access | identifier }

asset_constructor = {
    identifier ~ "(" ~ data_expr ~ ("," ~ data_expr)? ~ ")"
}

binary_operator = { "+" | "-" }

data_expr = { data_term ~ (binary_operator ~ data_term)* }
data_term = _{
    "none" |
    hex_string |
    number |
    bool |
    string |
    datum_constructor |
    property_access |
    identifier
}

spread_expression = { "..." ~ data_expr }

record_constructor_field = {
    identifier ~ ":" ~ data_expr
}

variant_constructor = {
    identifier ~ "::" ~ identifier ~ "{" ~
    (record_constructor_field ~ ",")* ~
    spread_expression? ~
    "}"
}

record_constructor = {
    identifier ~ "{" ~
    (record_constructor_field ~ ",")* ~
    spread_expression? ~
    "}"
}

datum_constructor = _{
    variant_constructor |
    record_constructor
}

address_expr = { string | identifier }

input_block_from = { "from" ~ ":" ~ address_expr }
input_block_datum_is = { "datum_is" ~ ":" ~ type }
input_block_min_amount = { "min_amount" ~ ":" ~ asset_expr }
input_block_redeemer = { "redeemer" ~ ":" ~ data_expr }

input_block_field = { 
    input_block_from |
    input_block_datum_is |
    input_block_min_amount |
    input_block_redeemer
}

input_block = {
    "input" ~ identifier ~ ("*")? ~ "{" ~
    (input_block_field ~ ",")* ~
    "}"
}

output_block_to = { "to" ~ ":" ~ address_expr }
output_block_amount = { "amount" ~ ":" ~ asset_expr }
output_block_datum = { "datum" ~ ":" ~ data_expr }

output_block_field = { 
    output_block_to |
    output_block_amount |
    output_block_datum
}

output_block = {
    "output" ~ "{" ~
    (output_block_field ~ ",")* ~
    "}"
}

burn_block_amount = { "amount" ~ ":" ~ asset_expr }

burn_block = {
    "burn" ~ "{" ~
    burn_block_amount ~ "," ~
    "}"
}

mint_block_amount = { "amount" ~ ":" ~ asset_expr }

mint_block = {
    "mint" ~ "{" ~
    mint_block_amount ~ "," ~
    "}"
}

// Transaction definition
tx_def = {
    "tx" ~ identifier ~ parameter_list ~ "{" ~
    input_block* ~
    burn_block? ~
    mint_block? ~
    output_block* ~
    "}"
}

// Program
program = {
    SOI ~
    (asset_def | party_def | type_def | tx_def)* ~
    EOI
}