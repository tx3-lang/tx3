diff --git a/crates/tx3-lang/src/analyzing.rs b/crates/tx3-lang/src/analyzing.rs
index 836357f..973cd2f 100644
--- a/crates/tx3-lang/src/analyzing.rs
+++ b/crates/tx3-lang/src/analyzing.rs
@@ -5,6 +5,8 @@
 
 use std::{collections::HashMap, rc::Rc};
 
+use serde::Serialize;
+
 use crate::ast::*;
 
 #[derive(Debug, thiserror::Error, miette::Diagnostic, PartialEq, Eq)]
@@ -293,6 +295,15 @@ impl Scope {
         );
     }
 
+    pub fn track_output(&mut self, name: &str, output: OutputBlock) {
+        if let Some(_) = output.name {
+            self.symbols.insert(
+                name.to_string(),
+                Symbol::Output(name.to_string(), Box::new(output.clone())),
+            );
+        }
+    }
+
     pub fn track_record_fields_for_type(&mut self, ty: &Type) {
         let schema = ty.properties();
 
@@ -552,6 +563,7 @@ impl Analyzable for DataExpr {
             DataExpr::PropertyOp(x) => x.analyze(parent),
             DataExpr::StaticAssetConstructor(x) => x.analyze(parent),
             DataExpr::AnyAssetConstructor(x) => x.analyze(parent),
+            DataExpr::MinUtxo(x) => x.analyze(parent),
             _ => AnalyzeReport::default(),
         }
     }
@@ -567,6 +579,7 @@ impl Analyzable for DataExpr {
             DataExpr::PropertyOp(x) => x.is_resolved(),
             DataExpr::StaticAssetConstructor(x) => x.is_resolved(),
             DataExpr::AnyAssetConstructor(x) => x.is_resolved(),
+            DataExpr::MinUtxo(x) => x.is_resolved(),
             _ => true,
         }
     }
@@ -655,7 +668,10 @@ impl Analyzable for AssetDef {
 
 impl Analyzable for Identifier {
     fn analyze(&mut self, parent: Option<Rc<Scope>>) -> AnalyzeReport {
+        let parent2 = parent.clone();
         let symbol = parent.and_then(|p| p.resolve(&self.value));
+        dbg!(parent2.as_ref().unwrap().symbols.keys(), &self.value);
+        dbg!(parent2.unwrap().resolve(&self.value));
 
         if symbol.is_none() {
             bail_report!(Error::not_in_scope(self.value.clone(), self));
@@ -984,6 +1000,13 @@ impl Analyzable for TxDef {
                 current.track_local_expr(&assign.name.value, assign.value.clone());
             }
 
+            for output in self.outputs.iter() {
+                output
+                    .name
+                    .clone()
+                    .map(|x| current.track_output(&x, output.clone()));
+            }
+
             Rc::new(current)
         };
 
@@ -996,6 +1019,13 @@ impl Analyzable for TxDef {
                 current.track_input(&input.name, input.clone());
             }
 
+            for output in self.outputs.iter() {
+                output
+                    .name
+                    .clone()
+                    .map(|x| current.track_output(&x, output.clone()));
+            }
+
             Rc::new(current)
         };
 
diff --git a/crates/tx3-lang/src/ast.rs b/crates/tx3-lang/src/ast.rs
index 45ab15f..def5eeb 100644
--- a/crates/tx3-lang/src/ast.rs
+++ b/crates/tx3-lang/src/ast.rs
@@ -23,6 +23,7 @@ pub enum Symbol {
     ParamVar(String, Box<Type>),
     LocalExpr(Box<DataExpr>),
     Input(String, Box<InputBlock>),
+    Output(String, Box<OutputBlock>),
     PartyDef(Box<PartyDef>),
     PolicyDef(Box<PolicyDef>),
     AssetDef(Box<AssetDef>),
@@ -709,6 +710,7 @@ pub enum DataExpr {
     NegateOp(NegateOp),
     PropertyOp(PropertyOp),
     UtxoRef(UtxoRef),
+    MinUtxo(Identifier),
 }
 
 impl DataExpr {
@@ -737,6 +739,8 @@ impl DataExpr {
             DataExpr::StaticAssetConstructor(x) => x.target_type(),
             DataExpr::AnyAssetConstructor(x) => x.target_type(),
             DataExpr::UtxoRef(_) => Some(Type::UtxoRef),
+            // TODO: check if this is correct. Not sure
+            DataExpr::MinUtxo(_) => Some(Type::AnyAsset),
         }
     }
 }
diff --git a/crates/tx3-lang/src/ir.rs b/crates/tx3-lang/src/ir.rs
index 6eed247..1b4cebb 100644
--- a/crates/tx3-lang/src/ir.rs
+++ b/crates/tx3-lang/src/ir.rs
@@ -175,7 +175,7 @@ pub enum Expression {
     UtxoRefs(Vec<UtxoRef>),
     UtxoSet(HashSet<Utxo>),
     Assets(Vec<AssetExpr>),
-
+    MinUtxo(Box<Expression>),
     EvalParam(Box<Param>),
     EvalBuiltIn(Box<BuiltInOp>),
     EvalCoerce(Box<Coerce>),
diff --git a/crates/tx3-lang/src/lowering.rs b/crates/tx3-lang/src/lowering.rs
index 0a5edba..e9d49e7 100644
--- a/crates/tx3-lang/src/lowering.rs
+++ b/crates/tx3-lang/src/lowering.rs
@@ -188,6 +188,7 @@ impl IntoLower for ast::Identifier {
             ast::Symbol::EnvVar(n, ty) => {
                 Ok(ir::Param::ExpectValue(n.to_lowercase().clone(), ty.into_lower(ctx)?).into())
             }
+            ast::Symbol::Output(n, out) => {}
             _ => {
                 dbg!(&self);
                 todo!();
@@ -421,6 +422,7 @@ impl IntoLower for ast::DataExpr {
             ast::DataExpr::NegateOp(x) => x.into_lower(ctx)?,
             ast::DataExpr::PropertyOp(x) => x.into_lower(ctx)?,
             ast::DataExpr::UtxoRef(x) => x.into_lower(ctx)?,
+            ast::DataExpr::MinUtxo(x) => ir::Expression::MinUtxo(Box::new(x.into_lower(ctx)?)),
         };
 
         Ok(out)
diff --git a/crates/tx3-lang/src/parsing.rs b/crates/tx3-lang/src/parsing.rs
index e4264c6..2aa4c38 100644
--- a/crates/tx3-lang/src/parsing.rs
+++ b/crates/tx3-lang/src/parsing.rs
@@ -1101,6 +1101,11 @@ impl DataExpr {
         )?))
     }
 
+    fn min_utxo_parse(pair: Pair<Rule>) -> Result<Self, Error> {
+        let inner = pair.into_inner().next().unwrap();
+        Ok(DataExpr::MinUtxo(Identifier::parse(inner)?))
+    }
+
     fn negate_op_parse(pair: Pair<Rule>, right: DataExpr) -> Result<Self, Error> {
         Ok(DataExpr::NegateOp(NegateOp {
             operand: Box::new(right),
@@ -1167,6 +1172,7 @@ impl AstNode for DataExpr {
                 Rule::utxo_ref => DataExpr::utxo_ref_parse(x),
                 Rule::static_asset_constructor => DataExpr::static_asset_constructor_parse(x),
                 Rule::any_asset_constructor => DataExpr::any_asset_constructor_parse(x),
+                Rule::min_utxo => DataExpr::min_utxo_parse(x),
                 Rule::data_expr => DataExpr::parse(x),
                 x => unreachable!("unexpected rule as data primary: {:?}", x),
             })
@@ -1204,6 +1210,7 @@ impl AstNode for DataExpr {
             DataExpr::NegateOp(x) => &x.span,
             DataExpr::PropertyOp(x) => &x.span,
             DataExpr::UtxoRef(x) => x.span(),
+            DataExpr::MinUtxo(x) => x.span(),
         }
     }
 }
diff --git a/crates/tx3-lang/src/tx3.pest b/crates/tx3-lang/src/tx3.pest
index fb94efd..03d34bd 100644
--- a/crates/tx3-lang/src/tx3.pest
+++ b/crates/tx3-lang/src/tx3.pest
@@ -120,6 +120,8 @@ any_asset_constructor = {
     "AnyAsset" ~ "(" ~ data_expr ~ "," ~ data_expr ~ "," ~ data_expr ~ ")"
 }
 
+min_utxo = { "min_utxo" ~ "(" ~ identifier ~ ")" }
+
 data_expr = { data_prefix* ~ data_primary ~ data_postfix* ~ (data_infix ~ data_prefix* ~ data_primary ~ data_postfix* )* }
 
     data_infix = _{ data_add | data_sub }
@@ -138,6 +140,7 @@ data_expr = { data_prefix* ~ data_primary ~ data_postfix* ~ (data_infix ~ data_p
         hex_string |
         number |
         bool |
+        min_utxo |
         string |
         struct_constructor |
         list_constructor |
